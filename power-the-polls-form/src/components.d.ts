/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PtpFormData } from "./util";
import { RouterHistory } from "@stencil/router";
export namespace Components {
    interface AddressInput {
    }
    interface LoadingSpinner {
        "dark": boolean;
    }
    interface PossiblyHiddenSelect {
        "fieldLabel": string;
        "name": string;
        "options": Map<string, string> | Set<string>;
        "selected": string;
    }
    interface PowerThePollsForm {
        /**
          * The label for an additional field to be displayed on the signup form. If undefined, no additional field will be displayed.
         */
        "customFormFieldLabel"?: string;
        "optUserOutOfChase": boolean;
        /**
          * To display custom text and images for a specific Power the Polls partner, enter their ID here.
         */
        "partnerId"?: string;
        /**
          * Optional name displayed in privacy policy disclaimer when `optUserOutOfChase` is true
         */
        "partnerName"?: string;
        "reset": () => Promise<void>;
        /**
          * The API key to access SmartyStreets which is used for address lookup.
         */
        "smartyStreetsApiKey"?: string;
    }
    interface PtpInfoJurisdiction {
        /**
          * Props possibly passed in from the form
         */
        "addtl"?: PtpFormData;
        /**
          * ID of jurisdiction for Work Elections
         */
        "jurisdictionId"?: string | number;
    }
    interface PtpInfoPollWorker {
        /**
          * City for matching to location
         */
        "city"?: string;
        /**
          * County for matching to location
         */
        "county"?: string;
        /**
          * Complete form data, if available
         */
        "formData"?: PtpFormData;
        "history"?: RouterHistory;
        /**
          * State for matching to location
         */
        "state"?: string;
    }
    interface PtpInfoState {
        /**
          * State abbreviation
         */
        "state"?: string;
    }
}
declare global {
    interface HTMLAddressInputElement extends Components.AddressInput, HTMLStencilElement {
    }
    var HTMLAddressInputElement: {
        prototype: HTMLAddressInputElement;
        new (): HTMLAddressInputElement;
    };
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLPossiblyHiddenSelectElement extends Components.PossiblyHiddenSelect, HTMLStencilElement {
    }
    var HTMLPossiblyHiddenSelectElement: {
        prototype: HTMLPossiblyHiddenSelectElement;
        new (): HTMLPossiblyHiddenSelectElement;
    };
    interface HTMLPowerThePollsFormElement extends Components.PowerThePollsForm, HTMLStencilElement {
    }
    var HTMLPowerThePollsFormElement: {
        prototype: HTMLPowerThePollsFormElement;
        new (): HTMLPowerThePollsFormElement;
    };
    interface HTMLPtpInfoJurisdictionElement extends Components.PtpInfoJurisdiction, HTMLStencilElement {
    }
    var HTMLPtpInfoJurisdictionElement: {
        prototype: HTMLPtpInfoJurisdictionElement;
        new (): HTMLPtpInfoJurisdictionElement;
    };
    interface HTMLPtpInfoPollWorkerElement extends Components.PtpInfoPollWorker, HTMLStencilElement {
    }
    var HTMLPtpInfoPollWorkerElement: {
        prototype: HTMLPtpInfoPollWorkerElement;
        new (): HTMLPtpInfoPollWorkerElement;
    };
    interface HTMLPtpInfoStateElement extends Components.PtpInfoState, HTMLStencilElement {
    }
    var HTMLPtpInfoStateElement: {
        prototype: HTMLPtpInfoStateElement;
        new (): HTMLPtpInfoStateElement;
    };
    interface HTMLElementTagNameMap {
        "address-input": HTMLAddressInputElement;
        "loading-spinner": HTMLLoadingSpinnerElement;
        "possibly-hidden-select": HTMLPossiblyHiddenSelectElement;
        "power-the-polls-form": HTMLPowerThePollsFormElement;
        "ptp-info-jurisdiction": HTMLPtpInfoJurisdictionElement;
        "ptp-info-poll-worker": HTMLPtpInfoPollWorkerElement;
        "ptp-info-state": HTMLPtpInfoStateElement;
    }
}
declare namespace LocalJSX {
    interface AddressInput {
    }
    interface LoadingSpinner {
        "dark"?: boolean;
    }
    interface PossiblyHiddenSelect {
        "fieldLabel"?: string;
        "name"?: string;
        "options"?: Map<string, string> | Set<string>;
        "selected"?: string;
    }
    interface PowerThePollsForm {
        /**
          * The label for an additional field to be displayed on the signup form. If undefined, no additional field will be displayed.
         */
        "customFormFieldLabel"?: string;
        /**
          * Dispatched when the user has submitted the form and it has successfully POSTed to `destination`
         */
        "onSubmitCompleted"?: (event: CustomEvent<any>) => void;
        /**
          * Dispatched when there is an error submitting the form to `destination`
         */
        "onSubmitError"?: (event: CustomEvent<any>) => void;
        "optUserOutOfChase"?: boolean;
        /**
          * To display custom text and images for a specific Power the Polls partner, enter their ID here.
         */
        "partnerId"?: string;
        /**
          * Optional name displayed in privacy policy disclaimer when `optUserOutOfChase` is true
         */
        "partnerName"?: string;
        /**
          * The API key to access SmartyStreets which is used for address lookup.
         */
        "smartyStreetsApiKey"?: string;
    }
    interface PtpInfoJurisdiction {
        /**
          * Props possibly passed in from the form
         */
        "addtl"?: PtpFormData;
        /**
          * ID of jurisdiction for Work Elections
         */
        "jurisdictionId"?: string | number;
    }
    interface PtpInfoPollWorker {
        /**
          * City for matching to location
         */
        "city"?: string;
        /**
          * County for matching to location
         */
        "county"?: string;
        /**
          * Complete form data, if available
         */
        "formData"?: PtpFormData;
        "history"?: RouterHistory;
        /**
          * State for matching to location
         */
        "state"?: string;
    }
    interface PtpInfoState {
        /**
          * State abbreviation
         */
        "state"?: string;
    }
    interface IntrinsicElements {
        "address-input": AddressInput;
        "loading-spinner": LoadingSpinner;
        "possibly-hidden-select": PossiblyHiddenSelect;
        "power-the-polls-form": PowerThePollsForm;
        "ptp-info-jurisdiction": PtpInfoJurisdiction;
        "ptp-info-poll-worker": PtpInfoPollWorker;
        "ptp-info-state": PtpInfoState;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "address-input": LocalJSX.AddressInput & JSXBase.HTMLAttributes<HTMLAddressInputElement>;
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "possibly-hidden-select": LocalJSX.PossiblyHiddenSelect & JSXBase.HTMLAttributes<HTMLPossiblyHiddenSelectElement>;
            "power-the-polls-form": LocalJSX.PowerThePollsForm & JSXBase.HTMLAttributes<HTMLPowerThePollsFormElement>;
            "ptp-info-jurisdiction": LocalJSX.PtpInfoJurisdiction & JSXBase.HTMLAttributes<HTMLPtpInfoJurisdictionElement>;
            "ptp-info-poll-worker": LocalJSX.PtpInfoPollWorker & JSXBase.HTMLAttributes<HTMLPtpInfoPollWorkerElement>;
            "ptp-info-state": LocalJSX.PtpInfoState & JSXBase.HTMLAttributes<HTMLPtpInfoStateElement>;
        }
    }
}
