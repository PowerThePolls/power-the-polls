/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, RouterHistory } from "@stencil/router";
import { Partner } from "./data/types";
export namespace Components {
    interface AppRoot {
    }
    interface ComponentList {
    }
    interface PageAbout {
    }
    interface PageContact {
    }
    interface PageFaq {
        /**
          * A list of entries to display in the FAQ see: FaqData.ts see: app-root.tsx
         */
        "data"?: { question: string, answer: string }[];
        /**
          * The page's title
         */
        "page_title"?: string;
    }
    interface PageForm {
        /**
          * Optional partnerId/source parameter to use when submitting the form. If the partnerId exists in `/data/PartnerList.ts` then additional partner data will be looked up.
         */
        "partnerId"?: string;
    }
    interface PageInfo {
    }
    interface PageJurisdiction {
        "match"?: MatchResults;
    }
    interface PagePartners {
        /**
          * List of all the partner logos to display
         */
        "partners"?: Partner[];
    }
    interface PagePrivacy {
    }
    interface PageSearch {
        "history": RouterHistory;
    }
    interface UiH3Bar {
    }
    interface UiImpactBox {
    }
    interface UiMenuButton {
        "isActive"?: boolean;
        /**
          * aria-label
         */
        "label"?: string;
    }
    interface UiSocialShare {
        /**
          * The displayed call-to-action text
         */
        "cta"?: string;
        /**
          * Key to send for analytics when user selects this social share
         */
        "eventKey"?: string;
        /**
          * Image to use from `assets/images/social/*`
         */
        "image"?: string;
        /**
          * If `true`, the share icons will be light in color
         */
        "invertColors"?: boolean;
        /**
          * The full name of the social network. Used as the link title text.
         */
        "name"?: string;
        /**
          * href for anchor (will open in a new window)
         */
        "url"?: string;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLComponentListElement extends Components.ComponentList, HTMLStencilElement {
    }
    var HTMLComponentListElement: {
        prototype: HTMLComponentListElement;
        new (): HTMLComponentListElement;
    };
    interface HTMLPageAboutElement extends Components.PageAbout, HTMLStencilElement {
    }
    var HTMLPageAboutElement: {
        prototype: HTMLPageAboutElement;
        new (): HTMLPageAboutElement;
    };
    interface HTMLPageContactElement extends Components.PageContact, HTMLStencilElement {
    }
    var HTMLPageContactElement: {
        prototype: HTMLPageContactElement;
        new (): HTMLPageContactElement;
    };
    interface HTMLPageFaqElement extends Components.PageFaq, HTMLStencilElement {
    }
    var HTMLPageFaqElement: {
        prototype: HTMLPageFaqElement;
        new (): HTMLPageFaqElement;
    };
    interface HTMLPageFormElement extends Components.PageForm, HTMLStencilElement {
    }
    var HTMLPageFormElement: {
        prototype: HTMLPageFormElement;
        new (): HTMLPageFormElement;
    };
    interface HTMLPageInfoElement extends Components.PageInfo, HTMLStencilElement {
    }
    var HTMLPageInfoElement: {
        prototype: HTMLPageInfoElement;
        new (): HTMLPageInfoElement;
    };
    interface HTMLPageJurisdictionElement extends Components.PageJurisdiction, HTMLStencilElement {
    }
    var HTMLPageJurisdictionElement: {
        prototype: HTMLPageJurisdictionElement;
        new (): HTMLPageJurisdictionElement;
    };
    interface HTMLPagePartnersElement extends Components.PagePartners, HTMLStencilElement {
    }
    var HTMLPagePartnersElement: {
        prototype: HTMLPagePartnersElement;
        new (): HTMLPagePartnersElement;
    };
    interface HTMLPagePrivacyElement extends Components.PagePrivacy, HTMLStencilElement {
    }
    var HTMLPagePrivacyElement: {
        prototype: HTMLPagePrivacyElement;
        new (): HTMLPagePrivacyElement;
    };
    interface HTMLPageSearchElement extends Components.PageSearch, HTMLStencilElement {
    }
    var HTMLPageSearchElement: {
        prototype: HTMLPageSearchElement;
        new (): HTMLPageSearchElement;
    };
    interface HTMLUiH3BarElement extends Components.UiH3Bar, HTMLStencilElement {
    }
    var HTMLUiH3BarElement: {
        prototype: HTMLUiH3BarElement;
        new (): HTMLUiH3BarElement;
    };
    interface HTMLUiImpactBoxElement extends Components.UiImpactBox, HTMLStencilElement {
    }
    var HTMLUiImpactBoxElement: {
        prototype: HTMLUiImpactBoxElement;
        new (): HTMLUiImpactBoxElement;
    };
    interface HTMLUiMenuButtonElement extends Components.UiMenuButton, HTMLStencilElement {
    }
    var HTMLUiMenuButtonElement: {
        prototype: HTMLUiMenuButtonElement;
        new (): HTMLUiMenuButtonElement;
    };
    interface HTMLUiSocialShareElement extends Components.UiSocialShare, HTMLStencilElement {
    }
    var HTMLUiSocialShareElement: {
        prototype: HTMLUiSocialShareElement;
        new (): HTMLUiSocialShareElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "component-list": HTMLComponentListElement;
        "page-about": HTMLPageAboutElement;
        "page-contact": HTMLPageContactElement;
        "page-faq": HTMLPageFaqElement;
        "page-form": HTMLPageFormElement;
        "page-info": HTMLPageInfoElement;
        "page-jurisdiction": HTMLPageJurisdictionElement;
        "page-partners": HTMLPagePartnersElement;
        "page-privacy": HTMLPagePrivacyElement;
        "page-search": HTMLPageSearchElement;
        "ui-h3-bar": HTMLUiH3BarElement;
        "ui-impact-box": HTMLUiImpactBoxElement;
        "ui-menu-button": HTMLUiMenuButtonElement;
        "ui-social-share": HTMLUiSocialShareElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface ComponentList {
    }
    interface PageAbout {
    }
    interface PageContact {
    }
    interface PageFaq {
        /**
          * A list of entries to display in the FAQ see: FaqData.ts see: app-root.tsx
         */
        "data"?: { question: string, answer: string }[];
        /**
          * The page's title
         */
        "page_title"?: string;
    }
    interface PageForm {
        /**
          * Optional partnerId/source parameter to use when submitting the form. If the partnerId exists in `/data/PartnerList.ts` then additional partner data will be looked up.
         */
        "partnerId"?: string;
    }
    interface PageInfo {
    }
    interface PageJurisdiction {
        "match"?: MatchResults;
    }
    interface PagePartners {
        /**
          * List of all the partner logos to display
         */
        "partners"?: Partner[];
    }
    interface PagePrivacy {
    }
    interface PageSearch {
        "history": RouterHistory;
    }
    interface UiH3Bar {
    }
    interface UiImpactBox {
    }
    interface UiMenuButton {
        "isActive"?: boolean;
        /**
          * aria-label
         */
        "label"?: string;
        "onToggle"?: (event: CustomEvent<UiMenuButton>) => void;
    }
    interface UiSocialShare {
        /**
          * The displayed call-to-action text
         */
        "cta"?: string;
        /**
          * Key to send for analytics when user selects this social share
         */
        "eventKey"?: string;
        /**
          * Image to use from `assets/images/social/*`
         */
        "image"?: string;
        /**
          * If `true`, the share icons will be light in color
         */
        "invertColors"?: boolean;
        /**
          * The full name of the social network. Used as the link title text.
         */
        "name"?: string;
        /**
          * href for anchor (will open in a new window)
         */
        "url"?: string;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "component-list": ComponentList;
        "page-about": PageAbout;
        "page-contact": PageContact;
        "page-faq": PageFaq;
        "page-form": PageForm;
        "page-info": PageInfo;
        "page-jurisdiction": PageJurisdiction;
        "page-partners": PagePartners;
        "page-privacy": PagePrivacy;
        "page-search": PageSearch;
        "ui-h3-bar": UiH3Bar;
        "ui-impact-box": UiImpactBox;
        "ui-menu-button": UiMenuButton;
        "ui-social-share": UiSocialShare;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "component-list": LocalJSX.ComponentList & JSXBase.HTMLAttributes<HTMLComponentListElement>;
            "page-about": LocalJSX.PageAbout & JSXBase.HTMLAttributes<HTMLPageAboutElement>;
            "page-contact": LocalJSX.PageContact & JSXBase.HTMLAttributes<HTMLPageContactElement>;
            "page-faq": LocalJSX.PageFaq & JSXBase.HTMLAttributes<HTMLPageFaqElement>;
            "page-form": LocalJSX.PageForm & JSXBase.HTMLAttributes<HTMLPageFormElement>;
            "page-info": LocalJSX.PageInfo & JSXBase.HTMLAttributes<HTMLPageInfoElement>;
            "page-jurisdiction": LocalJSX.PageJurisdiction & JSXBase.HTMLAttributes<HTMLPageJurisdictionElement>;
            "page-partners": LocalJSX.PagePartners & JSXBase.HTMLAttributes<HTMLPagePartnersElement>;
            "page-privacy": LocalJSX.PagePrivacy & JSXBase.HTMLAttributes<HTMLPagePrivacyElement>;
            "page-search": LocalJSX.PageSearch & JSXBase.HTMLAttributes<HTMLPageSearchElement>;
            "ui-h3-bar": LocalJSX.UiH3Bar & JSXBase.HTMLAttributes<HTMLUiH3BarElement>;
            "ui-impact-box": LocalJSX.UiImpactBox & JSXBase.HTMLAttributes<HTMLUiImpactBoxElement>;
            "ui-menu-button": LocalJSX.UiMenuButton & JSXBase.HTMLAttributes<HTMLUiMenuButtonElement>;
            "ui-social-share": LocalJSX.UiSocialShare & JSXBase.HTMLAttributes<HTMLUiSocialShareElement>;
        }
    }
}
